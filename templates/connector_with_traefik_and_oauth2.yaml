services:
  reverse-proxy:
    image: traefik:v3.1.2
    command:
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=[set the email you used by cert creation]
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
    ports:
      - 80:80
      - 443:443
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  edc-ui:
    image: ghcr.io/sovity/edc-ui:4.1.6
    environment:
      - EDC_UI_CATALOG_URLS=
      - EDC_UI_ACTIVE_PROFILE=mds-open-source
      - EDC_UI_CONFIG_URL=edc-ui-config
      - EDC_UI_MANAGEMENT_API_URL=https://[set your connector address]/api/management
      - EDC_UI_MANAGEMENT_API_KEY=[set your API Key value]
    labels:
      - traefik.enable=true
      - traefik.http.routers.edc-ui-https.rule=Host(`[set your connector address]`)
      - traefik.http.routers.edc-ui-https.middlewares=auth-proxy
      - traefik.http.routers.edc-ui-https.entrypoints=websecure
      - traefik.http.routers.edc-ui-https.tls.certresolver=myresolver
      - traefik.http.routers.edc-ui-https.service=edc-ui
      - traefik.http.services.edc-ui.loadbalancer.server.port=8080
      - traefik.http.routers.edc-ui-http.rule=Host(`[set your connector address]`)
      - traefik.http.routers.edc-ui-http.service=edc-ui
      - traefik.http.routers.edc-ui-http.entrypoints=web
      - traefik.http.routers.edc-ui-http.middlewares=https-redirect

  edc:
    image: ghcr.io/sovity/edc-ce-mds:10.4.2
    depends_on:
      - postgresql
    environment:
      EDC_OAUTH_TOKEN_URL: https://daps-next.test.mobility-dataspace.eu/realms/DAPS/protocol/openid-connect/token
      EDC_OAUTH_PROVIDER_JWKS_URL: https://daps-next.test.mobility-dataspace.eu/realms/DAPS/protocol/openid-connect/certs
      EDC_LOGGINGHOUSE_EXTENSION_ENABLED: "true"
      EDC_LOGGINGHOUSE_EXTENSION_URL: https://clearing-next.test.mobility-dataspace.eu #LoggingHouse URL of the MDS environment
      EDC_OAUTH_CLIENT_ID: [set your oauth client id]
      MY_EDC_PARTICIPANT_ID: [set your connector participant id]
      EDC_KEYSTORE: [set your cert path and name]
      EDC_KEYSTORE_PASSWORD: [set your cert password]
      EDC_OAUTH_CERTIFICATE_ALIAS: 1
      EDC_OAUTH_PRIVATE_KEY_ALIAS: 1
      MY_EDC_TITLE: [set your connector name]
      MY_EDC_DESCRIPTION: [set your connector description]
      MY_EDC_CURATOR_URL: [set your organization homepage]
      MY_EDC_CURATOR_NAME: [set your organization name]
      MY_EDC_MAINTAINER_URL: [set your maintainer homepage if applicable]
      MY_EDC_MAINTAINER_NAME: [set your maintainer name if applicable]
      MY_EDC_FQDN: [set your connector domain, e.g. my-connector.com]
      EDC_API_AUTH_KEY: [set your API Key value]
      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc
      MY_EDC_PROTOCOL: https://
      EDC_DSP_CALLBACK_ADDRESS: https://[set your connector address]/api/dsp
      EDC_WEB_REST_CORS_ENABLED: "true"
      EDC_WEB_REST_CORS_HEADERS: origin,content-type,accept,authorization,X-Api-Key
      EDC_WEB_REST_CORS_ORIGINS: "*"
    secrets:
      - keystore
    labels:
      - traefik.enable=true
      # /api/dsp
      - traefik.http.routers.dsp-http.rule=Host(`[set your connector address]`) && PathPrefix(`/api/dsp`)
      - traefik.http.routers.dsp-http.service=dsp
      - traefik.http.routers.dsp-http.entrypoints=web
      - traefik.http.routers.dsp-http.middlewares=https-redirect
      - traefik.http.routers.dsp-https.rule=Host(`[set your connector address]) && PathPrefix(`/api/dsp`)
      - traefik.http.routers.dsp-https.entrypoints=websecure
      - traefik.http.routers.dsp-https.tls.certresolver=myresolver
      - traefik.http.routers.dsp-https.service=dsp
      - traefik.http.services.dsp.loadbalancer.server.port=11003
      # /api/management
      - traefik.http.routers.api-http.rule=Host(`[set your connector address]`) && PathPrefix(`/api/management`)
      - traefik.http.routers.api-http.service=api
      - traefik.http.routers.api-http.entrypoints=web
      - traefik.http.routers.api-http.middlewares=https-redirect
      - traefik.http.routers.api-https.rule=Host(`[set your connector address]`) && PathPrefix(`/api/management`)
      - traefik.http.routers.api-https.entrypoints=websecure
      - traefik.http.routers.api-https.tls.certresolver=myresolver
      - traefik.http.routers.api-https.service=api
      - traefik.http.services.api.loadbalancer.server.port=11002
      - traefik.http.middlewares.apiKeyHeader.headers.customrequestheaders.X-Api-Key=[set your API Key value]
      - traefik.http.routers.api-https.middlewares=apiKeyHeader

  auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    environment:
      OAUTH2_PROXY_PROVIDER: keycloak-oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: [set name of your oauth2 proxy provider]
      OAUTH2_PROXY_OIDC_ISSUER_URL: [set your proxy oidc issuer url]
      OAUTH2_PROXY_COOKIE_SECRET: [set your proxy cookie secret]
      OAUTH2_PROXY_COOKIE_SECURE: "false"
      OAUTH2_PROXY_COOKIE_REFRESH: 30s
      OAUTH2_PROXY_COOKIE_EXPIRE: 30m
      OAUTH2_PROXY_COOKIE_DOMAIN: [set your connector domain]
      OAUTH2_PROXY_CLIENT_ID: [set your oauth2 proxy client id]
      OAUTH2_PROXY_CLIENT_SECRET: [set your oauth2 proxy client secret]
      OAUTH2_PROXY_REDIRECT_URL: https://[set your connector address]/oauth2/callback
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_UPSTREAMS: http://edc-ui:8080/,http://edc:11002/api/management/
      OAUTH2_PROXY_API_ROUTES: ^/api/
      OAUTH2_PROXY_SKIP_AUTH_ROUTES: ^(/oauth2)
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_SHOW_DEBUG_ON_ERROR: "true"
      OAUTH2_PROXY_SCOPE: openid profile email
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_WHITELIST_DOMAINS: [set your connector domain]
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.auth-proxy.forwardauth.address=http://auth-proxy:4180
      - traefik.http.middlewares.auth-proxy.forwardauth.authResponseHeaders=Authorization
      - traefik.http.middlewares.auth-proxy.forwardauth.trustForwardHeader=true
      - traefik.http.routers.auth-proxy-https.rule=Host(`[set your connector address]`) && PathPrefix(`/oauth2`)
      - traefik.http.routers.auth-proxy-https.entrypoints=websecure
      - traefik.http.routers.auth-proxy-https.tls.certresolver=myresolver
      - traefik.http.routers.auth-proxy-https.service=auth-proxy
      - traefik.http.routers.auth-proxy-http.rule=Host(`[set your connector address]`) && PathPrefix(`/oauth2`)
      - traefik.http.routers.auth-proxy-http.service=auth-proxy
      - traefik.http.routers.auth-proxy-http.entrypoints=web
      - traefik.http.services.auth-proxy.loadbalancer.server.port=4180

  postgresql:
    image: docker.io/bitnami/postgresql:11
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    volumes:
      - postgresql:/bitnami/postgresql

volumes:
  postgresql:
  letsencrypt:

secrets:
  keystore:
    file: /home/dheider/Documents/testconnector2/connector-certificate.jks
